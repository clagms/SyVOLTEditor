@gmf(foo="bar")
@namespace(uri="http://syvolt/2.0", prefix="syvolt")
package syvolt;

@gmf.diagram(foo="bar")
class TransformationModel {
  val AtomicContract[*] hasProperty;
  val GlobalSpecification specification;
}

@gmf.node(label="value", tool.name="Specification", label.text="Specification")
class GlobalSpecification {
  attr String value;
  
  val Expression abstractValue;
}

@gmf.node(label="className",color="236,240,241")
abstract class MatchClass extends AbstractClass {
  @gmf.compartment(foo="bar")
  val MatchAttribute[*] attribute;
}

abstract class PositiveMatchClass extends MatchClass {
}

@gmf.node(tool.name="Pre-Element", label.text="Pre-Element")
class AnyMatchClass extends PositiveMatchClass {
}

class ExistsMatchClass extends PositiveMatchClass {
}

@gmf.node(color="52,152,219",label.placement="none")
class PreCondition {

  @gmf.compartment(foo="bar")
  val MatchClass[*] ~class;
  val MatchAssociation[*] association;
}

abstract class MatchAssociation extends Association {
  ref MatchClass[1] source;
  ref MatchClass[1] target;
}

@gmf.link(source="source", target="target", target.decoration="arrow", tool.name="Pre-Association", label.text="Pre-Association")
class PositiveMatchAssociation extends MatchAssociation {
}

@gmf.node(label="className", color="236,240,241", tool.name="Post-Element", label.text="Post-Element")
class ApplyClass extends AbstractClass {

  @gmf.compartment(foo="bar")
  val ApplyAttribute[*] attribute;
}

@gmf.node(color="231,76,60", label.placement="none")
class PostCondition {

  @gmf.compartment(foo="bar")
  val ApplyClass[*] ~class;
  val ApplyAssociation[*] association;
}

@gmf.link(label="associationName", source="source", target="target", target.decoration="arrow", width="2", tool.name="Post-Association", label.text="Post-Association")
class ApplyAssociation extends Association {
  ref ApplyClass[1] source;
  ref ApplyClass[1] target;
}

@gmf.node(label="className")
abstract class AbstractClass {
  attr String className;
  attr String packageName;
  attr boolean allowInheritance = true;
  id attr String ~id;
}

@gmf.link(label="associationName", width="2")
abstract class Association {
  attr String associationName;
}

@gmf.node(label="attributeName", tool.name="Pre-Attribute", label.text="Pre-Attribute")
class MatchAttribute extends Attribute {

  @gmf.compartment(foo="bar")
  val MatchAttributeValue attributeValue;
}

@gmf.node(label="attributeName", tool.name="Post-Attribute", label.text="Post-Attribute")
class ApplyAttribute extends Attribute {

  @gmf.compartment(foo="bar")
  val Term attributeValue;
}

@gmf.node(label="name", tool.name="Contract", label.text="Contract")
class AtomicContract {
  attr String name;

  @gmf.compartment(foo="bar")
  val PreCondition[+] match;

  @gmf.compartment(foo="bar")
  val PostCondition[1] apply;
  val AbstractTemporalRelation[*] backwards;
  val AbstractAttributeRelation[*] attributeRelations;
  
  ref AtomicContract evaluatesBefore;
}

@gmf.link(tool.name="Same Element", label.text="Same Element")
class Trace extends AbstractTemporalRelation {
}

@gmf.node(foo="bar")
abstract class Term {
}

abstract class Operator extends Term {
}

@gmf.node(label="value" , tool.name="Text", label.text="Text")
class Atom extends Term, MatchAttributeValue {
  attr String value;
}

abstract class Ref extends Term {
}

@gmf.node(label.placement="none", tool.name="Same Value")
class AttributeRef extends Ref {

  @gmf.link(target.decoration="arrow", width="2", tool.description="Specify source attribute.")
  ref Attribute[1] attributeRef;
}


@gmf.node(label.placement="none", tool.name="Concatenation")
class Concat extends Operator {

  @gmf.compartment(foo="bar")
  val Term[1] leftTerm;

  @gmf.compartment(foo="bar")
  val Term[1] rightTerm;
}

@gmf.node(label.placement="none", tool.name="Wildcard", label.text="Wildcard")
class Wildcard extends Term {
}

@gmf.node(label="attributeName")
abstract class Attribute {
  attr String attributeName;
  id attr String ~id;
}

abstract class MatchAttributeValue {
}

@gmf.link(target="targetClass", source="sourceClass", style="dot", width="2")
abstract class AbstractTemporalRelation {
  ref ApplyClass[1] targetClass;
  ref PositiveMatchClass[1] sourceClass;
}

@gmf.link(target="targetAttribute", target.decoration="none", source="sourceAttribute", source.decoration="none", style="solid", width="2")
abstract class AbstractAttributeRelation {
  ref Attribute sourceAttribute;
  ref Attribute targetAttribute;
}

abstract class Expression {
}

class ContractReference extends Expression {
  ref AtomicContract contract;
}

abstract class Bidirectional extends Expression {
  val Expression left;
  val Expression right;
}

class And extends Bidirectional {
}

class Or extends Bidirectional {
}

class Implies extends Bidirectional {
}
